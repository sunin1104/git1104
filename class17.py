# 이차원리스트 
# : 리스트안에 리스트가 있는 데이터타입
lst = [
    # 열
    [1,2,3,4,5,6], # 행
    [7,8,9,10,11,12],
    [13,14,16,17,18],
]

# 이차원리스트[행인덱스][열인덱스]
print(lst[2][2])

# 행데이터만 모두 출력해주세
# lst 리스트 : 모든값 뽁기 => 반복
for i in range(len(lst)):
    print(lst[i])
    # 리스트 lst[i]  : 모든 값 뽑기 => 반복
    for j in range(len(lst[i])):
        print(lst[i][j])


for i in range(len(lst)):
    h= lst[i]
    print(h)
    # 리스트 lst[i]  : 모든 값 뽑기 => 반복
    for j in range(len(h)):
        print(h[j])


lst = ['a','b','c','d','e','f']

# i번째랑 다음값을 동시에 출력하고 싶다.
# a-b
# b-c
# c-d
# d-e
for i in range(len(lst)-1):
    print(i, lst[i],lst[i+1])

# IndexError: list index out of range => 인덱스 범위에 벗어났다~


# 과제) 수상한 구간 있습니다. 수상한 구간 찾기
# => 
date = [
    [1,'012500'], 
    [2,'012501'], 
    [3,'012502'], 
    [4,'012503'], 
    [5,'012504'], 
    [6,'012505'], 
    [7,'012506'], 
    [8,'012507'], [9,'012508'], [10,'012509'], [11,'012510'], [12,'012511'], [13,'012512'], [14,'012513'], [15,'012514'], [16,'012515'], [17,'012516'], [18,'012517'], [19,'012518'], [20,'012519'], [21,'012520'], [22,'012521'], [23,'012522'], [24,'012523'], [25,'012600'], [26,'012601'], [27,'012602'], [28,'012603'], [29,'012604'], [30,'012605'], [31,'012606'], [32,'012607'], [33,'012608'], [34,'012609'], [35,'012610'], [36,'012611'], [37,'012612'], [38,'012613'], [39,'012614'], [40,'012615'], [41,'012616'], [42,'012617'], [43,'012618'], [44,'012619'], [45,'012620'], [46,'012621'], [47,'012622'], [48,'012623'], [49,'012700'], [50,'012701'], [51,'012702'], [52,'012703'], [53,'012704'], [54,'012705'], [55,'012706'], [56,'012707'], [57,'012708'], [58,'012709'], [59,'012710'], [60,'012711'], [61,'012712'], [62,'012713'], [63,'012714'], [64,'012715'], [65,'012716'], [66,'012717'], [67,'012718'], [68,'012719'], [69,'012720'], [70,'012721'], [71,'012722'], [72,'012723'], [97,'012900'], [98,'012901'],[99,'012902'],[100,'012903'],[101,'012904'], [102,'012905'], [103,'012906'], [104,'012907'], [105,'012908'], [106,'012909'], [107,'012910'], [108,'012911'], [109,'012912'], [110,'012913'], [111,'012914'], [112,'012915'], [113,'012916'], [114,'012917'], [115,'012918'], [116,'012919'], [117,'012920'], [118,'012921'], [119,'012922'], [120,'012923'], [121,'013000'], [122,'013001'], [123,'013002'], [124,'013003'], [125,'013004'], [126,'013005'], [127,'013006'], [128,'013007'], [129,'013008'], [130,'013009'], [131,'013010'], [132,'013011'], [133,'013012'], [134,'013013'], [135,'013014'], [136,'013015'], [137,'013016'], [138,'013017'], [139,'013018'], [140,'013019'], [141,'013020'], [142,'013021'], [143,'013022'], [144,'013023'], [145,'013100'], [146,'013101'], [147,'013102'], [148,'013103'], [149,'013104'], [150,'013105'], [151,'013106'], [152,'013107'], [153,'013108'], [154,'013109'], [155,'013110'], [156,'013111'], [157,'013112'], [158,'013113'], [159,'013114'], [160,'013115'], [161,'013116'], [162,'013117'], [163,'013118'], [164,'013119'], [165,'013120'], [166,'013121'], [167,'013122'], [168,'013123']]

date_arr=[]

for i in range(len(date)-1):
    today=date[i][0]
    future=date[i+1][0]
    if today+1!=future:
        date_arr.append(f"오류 구간:{today} 오류 구간:{future}")
print(date_arr)
    