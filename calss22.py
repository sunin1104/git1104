


# 이차원리스트의 평균구하는 함수를 만들어주세요.
normal = [
    [0.8, 0.1, 0.4, 0.2, 0.1, 0.1, 0.4, 0.2, 0.1, 0.6],
    [0.5, 0.5, 0.9, 0.1, 0.5, 0.1, 0.5, 0.1, 0.6, 0.5],
    [0.9, 0.1, 0.1, 0.3, 0.3, 0.7, 0.8, 0.4, 0.1, 0.4],
    [0.1, 0.5, 0.5, 0.6, 0.7, 0.8, 0.8, 0.6, 0.6, 0.5],
    [0.6, 0.8, 0.6, 0.4, 0.9, 0.9, 0.5, 0.3, 0.3, 0.4],
    [0.2, 0.1, 0.7, 0.7, 0.2, 0.4, 0.7, 0.9, 0.2, 0.1],
    [0.8, 0.2, 0.7, 0.3, 0.9, 0.3, 0.9, 0.7, 0.3, 0.5],
    [0.9, 0.7, 0.2, 0.2, 0.1, 0.2, 0.4, 0.2, 0.3, 0.9],
    [0.2, 0.9, 0.8, 0.1, 0.1, 0.7, 0.1, 0.2, 0.5, 0.6],
    [0.8, 0.2, 0.1, 0.6, 0.7, 0.6, 0.1, 0.9, 0.4, 0.4],
    [0.4, 0.3, 0.9, 0.9, 0.9, 0.2, 0.4, 0.1, 0.4, 0.8],
    [0.2, 0.6, 0.7, 0.8, 0.6, 0.9, 0.7, 0.6, 0.2, 0.6],
    [0.9, 0.6, 0.3, 0.5, 0.2, 0.3, 0.8, 0.9, 0.5, 0.8],
    [0.8, 0.7, 0.8, 0.9, 0.1, 0.8, 0.7, 0.1, 0.9, 0.1],
    [0.2, 0.9, 0.7, 0.9, 0.5, 0.8, 0.2, 0.5, 0.7, 0.9],
    [0.7, 0.6, 0.4, 0.8, 0.4, 0.3, 0.6, 0.5, 0.5, 0.7]
    ]


normal2 =[
    [0.5, 1.1, 0.5, 0.8, 0.9, 0.6, 1.0, 0.7, 1.0, 0.9],
    [1.0, 0.9, 1.0, 1.0, 0.9, 1.0, 0.7, 1.0, 1.0, 1.0], 
    [1.0, 2.1, 0.8, 1.4, 0.5, 0.6, 1.0, 0.4, 2.0, 1.3], 
    [1.4, 1.0, 0.9, 1.0, 1.0, 1.0, 1.0, 1.1, 0.8, 1.3], 
    [2.0, 2.0, 2.1, 2.2, 1.4, 1.5, 1.7, 1.8, 2.0, 1.9], 
    [1.0, 0.9, 0.6, 2.0, 0.9, 1.0, 0.7, 0.4, 0.9, 0.5], 
    [1.5, 1.1, 0.8, 0.8, 0.7, 0.6, 2.0, 1.4, 1.0, 0.9], 
    [1.4, 1.0, 0.9, 1.0, 1.0, 1.0, 1.0, 1.1, 2.0, 1.3], 
    [1.0, 0.9, 0.6, 2.0, 0.9, 1.0, 0.7, 0.8, 0.9, 0.9], 
    [1.0, 2.5, 1.3, 0.8, 0.8, 0.7, 1.0, 1.4, 1.5, 1.2], 
    [1.0, 0.9, 1.0, 1.7, 1.8, 1.0, 0.9, 1.0, 1.7, 1.8], 
    [1.0, 2.1, 1.5, 1.4, 0.5, 0.6, 1.0, 0.4, 2.0, 1.3], 
    [2.1, 1.7, 1.8, 2.2, 1.4, 1.4, 1.0, 0.9, 0.8, 0.8], 
    [1.0, 1.0, 1.0, 0.8, 0.5, 1.0, 1.0, 1.1, 1.2, 1.0], 
    [0.8, 0.7, 0.9, 0.6, 0.5, 0.6, 0.3, 0.2, 0.3, 0.6],
    [0.9, 0.9, 0.6, 2.0, 0.9, 1.0, 0.7, 0.8, 0.9, 0.3]]


# 코드를 한번에 짜지마세요.
# 1. 입력 확인 -> 웹으로 받고         csv
# 2. 결과 나오는지 -> 웹으로 보내      chart 모듈 
# 3. 중간 로직 -> 서버 파이썬 처리     파이썬 => 확인 좀 힘들어요.




# noravg 함수 
# - 입력: 이차원리스트                               => 입력 갯수, 입력 타입 check할것
# - 기능: 전체 평균을 구하기
# - 결과 : 평균 리스트(float, 소수점 한자리수까지 나오도록 하기) => 결과는 무조건 1개



# 리스트.count("찾는 요소"): 리스트안에 몇개 있는지
# len() : 길이구하는 함수 (리스트,문자열,튜플, 집합, 딕셔너리/ 숫자, bool타입)
def noravg(nor):
    sum_col=0
    cnt_col=0
    for i in range(len(nor)):
        row=nor[i]
        for j in range(len(row)):
            col=row[j]
            cnt_col+=1
            sum_col+=col

    nor_avg=sum_col/cnt_col
    # round(숫자, n) : 소수점 n자리수까지 표현
    rr=round(nor_avg, 2)
    return rr

print(noravg(normal))
print(noravg(normal2))


##############################################


# 평균을 구할건데 이차원리스트로 여러개 입력이 주어진다고 전달을 받음 => 나는 check 아 함수로 만들어야겠다.
# 기능 => 함수 생성

# noravg 함수 
# - 입력: 이차원리스트                                => 입력 갯수, 입력 타입 check할것
# - 기능: 전체 평균을 구하기
# => 순서도를 작성해서 로직을 구체적으로 생각해야한다.
# - 결과 : 평균 리스트(float, 소수점 한자리수까지 나오도록 하기) => 결과는 무조건 1개

'''
step1 : 큰 형태 잡기 - 입력, 출력 데이터 확인
def norage2(lst):
    result = 0   # 결과 타입에 맞게 생성
    print('평균구하는 함수')
    return result

print(norage2(normal))

'''



'''
# step2 : 함수 내부 로직 작성
def noravg2(lst):
    result = 0   # 결과 타입에 맞게 생성

    sum_num = 0
    cnt_num = 0
    
    for i in range(len(lst)):
        # print("행",lst[i])
        for j in range(len(lst[i])):
            cnt_num +=1
            # print(lst[i][j],"/",cnt_num)
            sum_num += lst[i][j]
    # print("-----합계",sum_num)
    result = sum_num /cnt_num
    return round(result,1)

print(noravg2(normal))

'''



# step3 : 정답을 확인하 후에 코드를 다시보면서 정리  => 여유가 있을때, => 
# - print() 삭제를 의미하는 것은 아니다.
# - 코드 로직을 정리하는 과정 (불필요한 변수, 불필요한 연산)


'''
norage()함수
- 입력 : 
- 기능 : 
- 결과 : 

'''

def noravg2(lst):
    sum_num = 0
    
    for i in range(len(lst)):
        for j in range(len(lst[i])):
            sum_num += lst[i][j]

    # 리스트의 사이즈 = 행 X 열의 갯수
    lst_size = len(lst) * len(lst[0])
    result = sum_num /lst_size
    return round(result,1)

num = 0.5
print(noravg2(normal) == num)





# < 연습삼아 꼭 해보기>
# 총합 구하는 함수, 최대값, 최소값 구하는 함수
# 













