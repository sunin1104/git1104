# # 문제1) 폭탄의 전선리스트가 주어진다.
# # 주어진 해체 메뉴얼을 통해서 잘라야하는 전선을 출력해주세요.
# <메뉴얼>
# 1. 빨간전선이 없으면 두번째 전선을 자르시오.
# 2. 마지막 전선이 하얀색이면 마지막 전선을 자르시오.
# 3. 파란색 전선이 한개 이상이라면 두번째 전선을 자르시오.
# 4. 아니면 마지막 전선을 자르시오.

wires1 = ['blue','blue','blue','white','black']

lst=[]
tot=0
for i in range(len(wires1)):
    if wires1[i]=='blue':
        tot+=1
        lst.append(tot)

# # 1. 빨간전선이 없으면 두번째 전선을 자르시오.
if 'red' not in wires1:
    print(wires1[1])
# 2. 마지막 전선이 하얀색이면 마지막 전선을 자르시오.
elif wires1[-1]=='white':
    print(wires1[-1])
# 3번째조건) 파란색 전선이 한개 이상이라면 두번째 전선을 자르시오.

elif  int(lst[tot-1])>=1:
    print(wires1[1])
# 4. 아니면 마지막 전선을 자르시오.
else:
    print(wires1[-1])

print("------")
if 'red' not in wires1:
    print(wires1[1])
# 2. 마지막 전선이 하얀색이면 마지막 전선을 자르시오.
elif wires1[-1]=='white':
    print(wires1[-1])
# 3번째조건) 파란색 전선이 한개 이상이라면 두번째 전선을 자르시오.
elif  wires1.count('blue')>=1:
    print(wires1[1])
# 4. 아니면 마지막 전선을 자르시오.
else:
    print(wires1[-1])


# 리스트.count("찾는문자") : 찾는문자 리스트에 몇개가 있는지나온다.
# => 숫자




# 문제2) 폭탄의 전선리스트가 주어진다.
# 주어진 해체 메뉴얼을 통해서 잘라야하는 전선을 출력해주세요.
wires2=['yellow','blue','white','black','red']

tot1=0
tot2=0
for i in range(len(wires2)):
    #print(i)
    if wires2[i]=='red':
        tot1+=1
    elif wires2[i]=='yellow':
        tot2+=1
# print(tot1,tot2)

# 1. 네번째 전선이 검정생이 아니면 두번째 전선을 자르시오
if wires2[3]!='black':
    print(wires2[1])
# 2. 빨간색 전선이 하나이고 노란색 전선이 1개 이상이면 첫번째 전6선을 자르시오
elif tot1==1 and tot2>=1:
    print(wires2[0])
# 3. 파란색 전선이 없으면 네번째 전선을 자르시오.
elif 'blue' not in wires2:
    print(wires2[3])
# 4. 아니면 마지막 전선을 자르시오
else:
    print(wires2[-1])


print("#################################")
# 이차원배열
one = ['a','b','c','d','e']   # 리스트, 배열
two = [
    # 열(칸)
    ['a','b','c','d','e'], #내부리스트 = 행(줄)
    ['f','g','h','i','j'],
    ['k','l','m','n','o'],
]

# 이차원리스트의 요소를 접근하고싶다. => 인덱싱
#예제) a 위치 : 0행 0열
h = two[0]
print(two[0][0])
# 어차피 리스트 => 인덱스, 인덱싱 
# => 헷갈리면 변수화~~!


# two => 리스트 => 반복돌려보기
for i in range(len(two)):
    h = two[i]
    # h => 리스트 => 반복돌려보기
    print(h)
    for j in range(len(h)):
        print(h[j])

# two => 리스트 => 반복돌려보기
for i in range(len(two)):
    # h => 리스트 => 반복돌려보기
    print(two[i])
    for j in range(len(two[i])):
        print(two[i][j])



# 기본조건은 Error없이 정상작동 

# 좋은 코드는 한달뒤 내가 읽어도 이해가되는 코드
# 1. 주석
# 2. 변수,함수이름
# 3. 적당한 조건문과 반복문


# 2차원리스트
# 중간에 이상한 부분이 있다, 그부분을 찾아라
date = [
    [1,'012500'], 
    [2,'012501'], 
    [3,'012502'], 
    [4,'012503'], 
    [5,'012504'], 
    [6,'012505'], 
    [7,'012506'], 
    [8,'012507'], [9,'012508'], [10,'012509'], [11,'012510'], [12,'012511'], [13,'012512'], [14,'012513'], [15,'012514'], [1,'012515'], [17,'012516'], [18,'012517'], [19,'012518'], [20,'012519'], [21,'012520'], [22,'012521'], [23,'012522'], [24,'012523'], [25,'012600'], [26,'012601'], [27,'012602'], [28,'012603'], [29,'012604'], [30,'012605'], [31,'012606'], [32,'012607'], [33,'012608'], [34,'012609'], [35,'012610'], [36,'012611'], [37,'012612'], [38,'012613'], [39,'012614'], [40,'012615'], [41,'012616'], [42,'012617'], [43,'012618'], [44,'012619'], [45,'012620'], [46,'012621'], [47,'012622'], [48,'012623'], [49,'012700'], [50,'012701'], [51,'012702'], [52,'012703'], [53,'012704'], [54,'012705'], [55,'012706'], [56,'012707'], [57,'012708'], [58,'012709'], [59,'012710'], [60,'012711'], [61,'012712'], [62,'012713'], [63,'012714'], [64,'012715'], [65,'012716'], [66,'012717'], [67,'012718'], [68,'012719'], [69,'012720'], [70,'012721'], [71,'012722'], [72,'012723'], [97,'012900'], [98,'012901'],[99,'012902'],[100,'012903'],[101,'012904'], [102,'012905'], [103,'012906'], [104,'012907'], [105,'012908'], [106,'012909'], [107,'012910'], [108,'012911'], [109,'012912'], [110,'012913'], [111,'012914'], [112,'012915'], [113,'012916'], [114,'012917'], [115,'012918'], [116,'012919'], [117,'012920'], [118,'012921'], [119,'012922'], [120,'012923'], [121,'013000'], [122,'013001'], [123,'013002'], [124,'013003'], [125,'013004'], [126,'013005'], [127,'013006'], [128,'013007'], [129,'013008'], [130,'013009'], [131,'013010'], [132,'013011'], [133,'013012'], [134,'013013'], [135,'013014'], [136,'013015'], [137,'013016'], [138,'013017'], [139,'013018'], [140,'013019'], [141,'013020'], [142,'013021'], [143,'013022'], [144,'013023'], [145,'013100'], [146,'013101'], [147,'013102'], [148,'013103'], [149,'013104'], [150,'013105'], [151,'013106'], [152,'013107'], [153,'013108'], [154,'013109'], [155,'013110'], [156,'013111'], [157,'013112'], [158,'013113'], [159,'013114'], [160,'013115'], [161,'013116'], [162,'013117'], [163,'013118'], [164,'013119'], [165,'013120'], [166,'013121'], [167,'013122'], [168,'013123']]

# 이상한 72 ~ 97:
# => (1)1칸씩 순서대로 증가했는데 이구간 1칸이 아니라서 이상하다. 
# => (2) 현재와 다음의 차이가 1차이가 나야하는 아닌구간이 이상하다.
# date=date_list

for i in range(1,len(date)-3):
    # 이상한부분은 숫자, 날짜
    # 숫자는 몇번째 열에 있나요?
    # 행 / 열 칸
    # 현재 date[i]
    # 다음 date[i+1]
    print("이전",date[i-1][0])
    print("현재", date[i][0])
    print("다음", date[i+1][0])
    print("다다음", date[i+2][0])
    print("다다다음",date[i+3][0])
    print("---")
    # 현재 i 번째, 다음값 i+1행 출력해보기
    # IndexError: list index out of range => 인덱스가 잘못되었따 => 초과 된상황
    # (과제) 현재와 다음값을 비교해서 1차이가 나지 않는 구간을 찾으시오.

# 이차원리스트 행, 열
# 알고리즘 문제
# 문자열 반복)  https://www.acmicpc.net/problem/2675
# 나머지) https://www.acmicpc.net/problem/3052

# 2차원리스트
# 중간에 이상한 부분이 있다, 그부분을 찾아라
# date = [
#     [1,'012500'], 
#     [2,'012501'], 
#     [3,'012502'], 
#     [4,'012503'], 
#     [5,'012504'], 
#     [6,'012505'], 
#     [7,'012506'], 
#     [8,'012507'], [9,'012508'], [10,'012509'], [11,'012510'], [12,'012511'], [13,'012512'], [14,'012513'], [15,'012514'], [1,'012515'], [17,'012516'], [18,'012517'], [19,'012518'], [20,'012519'], [21,'012520'], [22,'012521'], [23,'012522'], [24,'012523'], [25,'012600'], [26,'012601'], [27,'012602'], [28,'012603'], [29,'012604'], [30,'012605'], [31,'012606'], [32,'012607'], [33,'012608'], [34,'012609'], [35,'012610'], [36,'012611'], [37,'012612'], [38,'012613'], [39,'012614'], [40,'012615'], [41,'012616'], [42,'012617'], [43,'012618'], [44,'012619'], [45,'012620'], [46,'012621'], [47,'012622'], [48,'012623'], [49,'012700'], [50,'012701'], [51,'012702'], [52,'012703'], [53,'012704'], [54,'012705'], [55,'012706'], [56,'012707'], [57,'012708'], [58,'012709'], [59,'012710'], [60,'012711'], [61,'012712'], [62,'012713'], [63,'012714'], [64,'012715'], [65,'012716'], [66,'012717'], [67,'012718'], [68,'012719'], [69,'012720'], [70,'012721'], [71,'012722'], [72,'012723'], [97,'012900'], [98,'012901'],[99,'012902'],[100,'012903'],[101,'012904'], [102,'012905'], [103,'012906'], [104,'012907'], [105,'012908'], [106,'012909'], [107,'012910'], [108,'012911'], [109,'012912'], [110,'012913'], [111,'012914'], [112,'012915'], [113,'012916'], [114,'012917'], [115,'012918'], [116,'012919'], [117,'012920'], [118,'012921'], [119,'012922'], [120,'012923'], [121,'013000'], [122,'013001'], [123,'013002'], [124,'013003'], [125,'013004'], [126,'013005'], [127,'013006'], [128,'013007'], [129,'013008'], [130,'013009'], [131,'013010'], [132,'013011'], [133,'013012'], [134,'013013'], [135,'013014'], [136,'013015'], [137,'013016'], [138,'013017'], [139,'013018'], [140,'013019'], [141,'013020'], [142,'013021'], [143,'013022'], [144,'013023'], [145,'013100'], [146,'013101'], [147,'013102'], [148,'013103'], [149,'013104'], [150,'013105'], [151,'013106'], [152,'013107'], [153,'013108'], [154,'013109'], [155,'013110'], [156,'013111'], [157,'013112'], [158,'013113'], [159,'013114'], [160,'013115'], [161,'013116'], [162,'013117'], [163,'013118'], [164,'013119'], [165,'013120'], [166,'013121'], [167,'013122'], [168,'013123']]

# for i in range(len(date)-1):
#     past=date[i][0]
#     today=date[i+1][0]
#     if (past+1)!=today:
#         print("error")
#         print(f"이전값:{past}, 현재값:{today}")


