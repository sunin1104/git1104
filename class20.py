
# 리스트
lst = ['a','b','c','d','e','f']
# 예제) 리스트의 0번째 값을 한번 출력해보기
print(lst[0])
# 0번째의 오른쪽에 있는 값을 출력해보기
print(lst[0-1])

i=2
# 예제) 리스트의 i번째값을 확인하기 =>
# => 순서, ~번째, 위치, 어디에 : 인덱스
# => 값, 내용, : value, 인덱싱

print(lst[i])
print(lst[i+1])



# 출발지 9
# 도착 5
# 벽 : 1
# 길 : 0



# 현재 위치 => i행, j열
#         => 0행 1열 
# 변수이름 = 데이터
# 현재 위치(인덱스)




# <리스트>
#      0
lst = ['a','b','c','d','e','f']
# 'a'값의 위치를 출력해주세요.     => 인덱스
# 인덱싱 : 인덱스위치의 값을 뽑는기    => 값
# 위치를 변수에 저장해주세요.
x=0

print("============")

route= [
[1,9,1,1,1,1,1,1],
[1,0,1,0,0,0,0,1],
[1,0,0,0,1,1,0,1],
[1,1,1,1,1,1,0,1],
[1,0,0,0,0,0,0,1],
[1,0,1,1,1,1,1,1],
[1,0,0,0,0,0,0,5],
[1,1,1,1,1,1,1,1]
]

# 한글로 시뮬레이션



# 9이 현재 위치다. 현재의 위치를 변수로 저장해주세요.=> 0행 1열 => i행 j열로 표현하고 싶다.
i=0
j=1

# route의 i행j열의 값을 출력해보세요.
print(route[i][j])
route[i][j]

# 현재값이 5번이 될때까지 반복을 해서 길을 찾습니다.
# 반복문
# - for i in range(횟수) : 뚜렷한 횟수가 있을때,
# - while  : 조건
# whlie 조건 : 조건이 만족하면 반복 (if문이란 반복) ~하면 탈출 

# while 조건:
#     조건이 만족하면 실행

while route[i][j] !=5:
    print("탐색을 계속하기")
    

